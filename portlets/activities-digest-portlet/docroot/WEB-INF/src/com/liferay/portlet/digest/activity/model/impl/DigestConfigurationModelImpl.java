/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.digest.activity.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.digest.activity.model.DigestConfiguration;
import com.liferay.portlet.digest.activity.model.DigestConfigurationModel;
import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DigestConfiguration service. Represents a row in the &quot;Digest_DigestConfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.digest.activity.model.DigestConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DigestConfigurationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DigestConfigurationImpl
 * @see com.liferay.portlet.digest.activity.model.DigestConfiguration
 * @see com.liferay.portlet.digest.activity.model.DigestConfigurationModel
 * @generated
 */
public class DigestConfigurationModelImpl extends BaseModelImpl<DigestConfiguration>
	implements DigestConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a digest configuration model instance should use the {@link com.liferay.portlet.digest.activity.model.DigestConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "Digest_DigestConfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "enabled", Types.BOOLEAN },
			{ "frequency", Types.INTEGER },
			{ "scopeGroupId", Types.BIGINT },
			{ "scopeUserId", Types.BIGINT },
			{ "summaryLength", Types.INTEGER },
			{ "activityTypes", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Digest_DigestConfiguration (id_ LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,groupId LONG,userId LONG,enabled BOOLEAN,frequency INTEGER,scopeGroupId LONG,scopeUserId LONG,summaryLength INTEGER,activityTypes STRING null)";
	public static final String TABLE_SQL_DROP = "drop table Digest_DigestConfiguration";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.digest.activity.model.DigestConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.digest.activity.model.DigestConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portlet.digest.activity.model.DigestConfiguration"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long ENABLED_COLUMN_BITMASK = 2L;
	public static long FREQUENCY_COLUMN_BITMASK = 4L;
	public static long SCOPEGROUPID_COLUMN_BITMASK = 8L;
	public static long SCOPEUSERID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.portlet.digest.activity.model.DigestConfiguration"));

	public DigestConfigurationModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DigestConfiguration.class;
	}

	public String getModelClassName() {
		return DigestConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("enabled", getEnabled());
		attributes.put("frequency", getFrequency());
		attributes.put("scopeGroupId", getScopeGroupId());
		attributes.put("scopeUserId", getScopeUserId());
		attributes.put("summaryLength", getSummaryLength());
		attributes.put("activityTypes", getActivityTypes());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Boolean enabled = (Boolean)attributes.get("enabled");

		if (enabled != null) {
			setEnabled(enabled);
		}

		Integer frequency = (Integer)attributes.get("frequency");

		if (frequency != null) {
			setFrequency(frequency);
		}

		Long scopeGroupId = (Long)attributes.get("scopeGroupId");

		if (scopeGroupId != null) {
			setScopeGroupId(scopeGroupId);
		}

		Long scopeUserId = (Long)attributes.get("scopeUserId");

		if (scopeUserId != null) {
			setScopeUserId(scopeUserId);
		}

		Integer summaryLength = (Integer)attributes.get("summaryLength");

		if (summaryLength != null) {
			setSummaryLength(summaryLength);
		}

		String activityTypes = (String)attributes.get("activityTypes");

		if (activityTypes != null) {
			setActivityTypes(activityTypes);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public boolean getEnabled() {
		return _enabled;
	}

	public boolean isEnabled() {
		return _enabled;
	}

	public void setEnabled(boolean enabled) {
		_columnBitmask |= ENABLED_COLUMN_BITMASK;

		if (!_setOriginalEnabled) {
			_setOriginalEnabled = true;

			_originalEnabled = _enabled;
		}

		_enabled = enabled;
	}

	public boolean getOriginalEnabled() {
		return _originalEnabled;
	}

	public int getFrequency() {
		return _frequency;
	}

	public void setFrequency(int frequency) {
		_columnBitmask |= FREQUENCY_COLUMN_BITMASK;

		if (!_setOriginalFrequency) {
			_setOriginalFrequency = true;

			_originalFrequency = _frequency;
		}

		_frequency = frequency;
	}

	public int getOriginalFrequency() {
		return _originalFrequency;
	}

	public long getScopeGroupId() {
		return _scopeGroupId;
	}

	public void setScopeGroupId(long scopeGroupId) {
		_columnBitmask |= SCOPEGROUPID_COLUMN_BITMASK;

		if (!_setOriginalScopeGroupId) {
			_setOriginalScopeGroupId = true;

			_originalScopeGroupId = _scopeGroupId;
		}

		_scopeGroupId = scopeGroupId;
	}

	public long getOriginalScopeGroupId() {
		return _originalScopeGroupId;
	}

	public long getScopeUserId() {
		return _scopeUserId;
	}

	public void setScopeUserId(long scopeUserId) {
		_columnBitmask |= SCOPEUSERID_COLUMN_BITMASK;

		if (!_setOriginalScopeUserId) {
			_setOriginalScopeUserId = true;

			_originalScopeUserId = _scopeUserId;
		}

		_scopeUserId = scopeUserId;
	}

	public String getScopeUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getScopeUserId(), "uuid", _scopeUserUuid);
	}

	public void setScopeUserUuid(String scopeUserUuid) {
		_scopeUserUuid = scopeUserUuid;
	}

	public long getOriginalScopeUserId() {
		return _originalScopeUserId;
	}

	public int getSummaryLength() {
		return _summaryLength;
	}

	public void setSummaryLength(int summaryLength) {
		_summaryLength = summaryLength;
	}

	public String getActivityTypes() {
		if (_activityTypes == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityTypes;
		}
	}

	public void setActivityTypes(String activityTypes) {
		_activityTypes = activityTypes;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DigestConfiguration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DigestConfiguration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DigestConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public DigestConfiguration toUnescapedModel() {
		return (DigestConfiguration)this;
	}

	@Override
	public Object clone() {
		DigestConfigurationImpl digestConfigurationImpl = new DigestConfigurationImpl();

		digestConfigurationImpl.setId(getId());
		digestConfigurationImpl.setCompanyId(getCompanyId());
		digestConfigurationImpl.setCreateDate(getCreateDate());
		digestConfigurationImpl.setModifiedDate(getModifiedDate());
		digestConfigurationImpl.setGroupId(getGroupId());
		digestConfigurationImpl.setUserId(getUserId());
		digestConfigurationImpl.setEnabled(getEnabled());
		digestConfigurationImpl.setFrequency(getFrequency());
		digestConfigurationImpl.setScopeGroupId(getScopeGroupId());
		digestConfigurationImpl.setScopeUserId(getScopeUserId());
		digestConfigurationImpl.setSummaryLength(getSummaryLength());
		digestConfigurationImpl.setActivityTypes(getActivityTypes());

		digestConfigurationImpl.resetOriginalValues();

		return digestConfigurationImpl;
	}

	public int compareTo(DigestConfiguration digestConfiguration) {
		long primaryKey = digestConfiguration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DigestConfiguration)) {
			return false;
		}

		DigestConfiguration digestConfiguration = (DigestConfiguration)obj;

		long primaryKey = digestConfiguration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DigestConfigurationModelImpl digestConfigurationModelImpl = this;

		digestConfigurationModelImpl._originalCompanyId = digestConfigurationModelImpl._companyId;

		digestConfigurationModelImpl._setOriginalCompanyId = false;

		digestConfigurationModelImpl._originalEnabled = digestConfigurationModelImpl._enabled;

		digestConfigurationModelImpl._setOriginalEnabled = false;

		digestConfigurationModelImpl._originalFrequency = digestConfigurationModelImpl._frequency;

		digestConfigurationModelImpl._setOriginalFrequency = false;

		digestConfigurationModelImpl._originalScopeGroupId = digestConfigurationModelImpl._scopeGroupId;

		digestConfigurationModelImpl._setOriginalScopeGroupId = false;

		digestConfigurationModelImpl._originalScopeUserId = digestConfigurationModelImpl._scopeUserId;

		digestConfigurationModelImpl._setOriginalScopeUserId = false;

		digestConfigurationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DigestConfiguration> toCacheModel() {
		DigestConfigurationCacheModel digestConfigurationCacheModel = new DigestConfigurationCacheModel();

		digestConfigurationCacheModel.id = getId();

		digestConfigurationCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			digestConfigurationCacheModel.createDate = createDate.getTime();
		}
		else {
			digestConfigurationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			digestConfigurationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			digestConfigurationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		digestConfigurationCacheModel.groupId = getGroupId();

		digestConfigurationCacheModel.userId = getUserId();

		digestConfigurationCacheModel.enabled = getEnabled();

		digestConfigurationCacheModel.frequency = getFrequency();

		digestConfigurationCacheModel.scopeGroupId = getScopeGroupId();

		digestConfigurationCacheModel.scopeUserId = getScopeUserId();

		digestConfigurationCacheModel.summaryLength = getSummaryLength();

		digestConfigurationCacheModel.activityTypes = getActivityTypes();

		String activityTypes = digestConfigurationCacheModel.activityTypes;

		if ((activityTypes != null) && (activityTypes.length() == 0)) {
			digestConfigurationCacheModel.activityTypes = null;
		}

		return digestConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", enabled=");
		sb.append(getEnabled());
		sb.append(", frequency=");
		sb.append(getFrequency());
		sb.append(", scopeGroupId=");
		sb.append(getScopeGroupId());
		sb.append(", scopeUserId=");
		sb.append(getScopeUserId());
		sb.append(", summaryLength=");
		sb.append(getSummaryLength());
		sb.append(", activityTypes=");
		sb.append(getActivityTypes());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.portlet.digest.activity.model.DigestConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enabled</column-name><column-value><![CDATA[");
		sb.append(getEnabled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frequency</column-name><column-value><![CDATA[");
		sb.append(getFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scopeGroupId</column-name><column-value><![CDATA[");
		sb.append(getScopeGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scopeUserId</column-name><column-value><![CDATA[");
		sb.append(getScopeUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summaryLength</column-name><column-value><![CDATA[");
		sb.append(getSummaryLength());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityTypes</column-name><column-value><![CDATA[");
		sb.append(getActivityTypes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DigestConfiguration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DigestConfiguration.class
		};
	private long _id;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private boolean _enabled;
	private boolean _originalEnabled;
	private boolean _setOriginalEnabled;
	private int _frequency;
	private int _originalFrequency;
	private boolean _setOriginalFrequency;
	private long _scopeGroupId;
	private long _originalScopeGroupId;
	private boolean _setOriginalScopeGroupId;
	private long _scopeUserId;
	private String _scopeUserUuid;
	private long _originalScopeUserId;
	private boolean _setOriginalScopeUserId;
	private int _summaryLength;
	private String _activityTypes;
	private long _columnBitmask;
	private DigestConfiguration _escapedModel;
}